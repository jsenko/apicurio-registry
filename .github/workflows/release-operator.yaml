name: Release Operator
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag name'
        required: true
  release:
    types: [released, prereleased] # TODO: What to do with pre-release?


env:
  # The values are extracted from the github.event context,
  # which is only available when the workflow gets triggered by a release event.
  RELEASE_VERSION: ${{ github.event.release.name }}
  BRANCH: ${{ github.event.release.target_commitish }}


jobs:
  release-operator:
    # TODO vvv
    if: github.repository_owner == 'jsenko' && (github.event_name == 'workflow_dispatch' || startsWith(github.event.release.tag_name, '0.'))
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      RELEASE_TYPE: release
    steps:

      - name: Fetch Release Details
        if: github.event_name == 'workflow_dispatch'
        run: |
          touch release.json && curl https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${{ github.event.inputs.tag }} > release.json
          echo "RELEASE_VERSION=$(cat release.json | jq -r '.name')" >> $GITHUB_ENV
          echo "BRANCH=$(cat release.json | jq -r '.target_commitish')" >> $GITHUB_ENV

      - name: Download Source Code
        run: |
          git config --global user.name "apicurio-ci"
          git config --global user.email "apicurio.ci@gmail.com"
          git clone https://jsenko:${{ secrets.ACCESS_TOKEN }}@github.com/jsenko/apicurio-registry.git registry
          cd registry && git checkout "$RELEASE_VERSION"

      # We have faced issues in the past where a github release was created from a wrong commit
      # This step will ensure that the release was created from the right commit  
      - name: Verify Project Version
        working-directory: registry
        run: |
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ $PROJECT_VERSION != $RELEASE_VERSION ]]
          then
              echo "ERROR: Project Version '${PROJECT_VERSION}' does not match with Released Version '${RELEASE_VERSION}'"
              exit 1	  
          fi

      - name: Configure env. variables 1
        working-directory: registry/operator # Requires make
        run: |
          echo "GH_TOKEN=${{ secrets.ACCESS_TOKEN }}" >> "$GITHUB_ENV"
          echo "CUSTOM_ENV=$(pwd)/custom_env" >> "$GITHUB_ENV"
          # TODO: vvv
          echo "IMAGE_REGISTRY=quay.io/jsenkorh" >> $GITHUB_ENV                    
          echo "PACKAGE_VERSION=$(make VAR=LC_VERSION get-variable)" >> "$GITHUB_ENV"          

      - name: Configure env. variables 2
        run: |
          echo "RELEASE_BRANCH=release-$PACKAGE_VERSION" >> "$GITHUB_ENV"          

      - name: Configure custom env. variables 1
        # See https://github.com/actions/runner/issues/1126
        run: |
          echo "export OPERAND_IMAGE_TAG=$RELEASE_VERSION" >> "$CUSTOM_ENV"

      - name: Show make configuration
        working-directory: registry/operator
        # TODO: Only with debug logging?
        run: |
          source "$CUSTOM_ENV"
          make config-show

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: temurin
          cache: maven

      - name: Build the operator
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          make SKIP_TESTS=true build

      - name: Login to Quay.io Registry
        run: docker login -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io

      - name: Build and push operator image
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          make ADDITIONAL_IMAGE_TAG=latest image-build image-push

      - name: Wait on operand images
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          # export REGISTRY_APP_IMAGE=$(make VAR=REGISTRY_APP_IMAGE get-variable)
          # until docker manifest inspect "$REGISTRY_APP_IMAGE" >& /dev/null; do echo "Waiting on $REGISTRY_APP_IMAGE"; sleep 10; done
          # export REGISTRY_UI_IMAGE=$(make VAR=REGISTRY_UI_IMAGE get-variable)
          # until docker manifest inspect "$REGISTRY_UI_IMAGE" >& /dev/null; do echo "Waiting on $REGISTRY_UI_IMAGE"; sleep 10; done
          export STUDIO_UI_IMAGE=$(make VAR=STUDIO_UI_IMAGE get-variable)
          until docker manifest inspect "$STUDIO_UI_IMAGE" >& /dev/null; do echo "Waiting on $STUDIO_UI_IMAGE"; sleep 10; done

      # TODO!!!!
      # We need to temporarily change the tags because the images do not exists when testing

      - name: Remove me!
        run: |
          echo "export OPERAND_IMAGE_TAG=latest-snapshot" >> "$CUSTOM_ENV"
          # TODO: sed -i 's/^export FOO=.*$/d' workflow_env


      - name: Build operator bundle
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          make bundle

      - name: Build operator catalog
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          make ADDITIONAL_CATALOG_TAG=latest catalog

      - name: Remove me!
        run: |
          cat registry/operator/target/bundle/apicurio-registry-3/$RELEASE_VERSION/manifests/registry.apicur.io_apicurioregistries3.yaml || true
          # sed -i 's/^export OPERAND_IMAGE_TAG=.*$/d' "$CUSTOM_ENV"
          echo "export OPERAND_IMAGE_TAG=$RELEASE_VERSION" >> "$CUSTOM_ENV"

      # REMOTE TESTS ====

      - uses: ./registry/.github/workflows/composite/setup-minikube
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          # make REMOTE_TESTS_ALL_INSTALL_FILE=install/install.yaml remote-tests-all
          make  remote-tests-all

      # ====

      - name: Build dist archive and attach to the release
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          make dist # TODO This also does install file
          DIST_FILE="target/apicurio-registry-operator-$RELEASE_VERSION.tar.gz"
          gh release upload "$RELEASE_VERSION" "$DIST_FILE"

      - name: Checkout the Community Operators repository
        run: |
          mkdir community-operators
          cd community-operators
          git init
          git remote add origin https://github.com/k8s-operatorhub/community-operators.git          
          git remote add source "https://jsenko:${{ secrets.ACCESS_TOKEN }}@github.com/jsenko/community-operators.git"
          git fetch
          git checkout --track origin/main
          git push -f source main

      - name: Create the Community Operators PR
        working-directory: community-operators
        run: |
          git checkout -b "$RELEASE_BRANCH"
          TITLE="Release Apicurio Registry Operator $PACKAGE_VERSION"
          BODY=$(curl -s https://raw.githubusercontent.com/k8s-operatorhub/community-operators/main/docs/pull_request_template.md)
          # TODO: Remove vvv
          mkdir operators/apicurio-registry-3
          # TODO: Remove vvv
          echo -e "---\nupdateGraph: replaces-mode\nreviewers:\n  - apicurio-ci\n  - carlesarnal\n  - EricWittmann  - jsenko\n" > operators/apicurio-registry-3/ci.yaml
          cp -r "../registry/operator/target/bundle/apicurio-registry-3/$PACKAGE_VERSION" operators/apicurio-registry-3
          git add .
          git commit -s -m "$TITLE"
          git push -f source "$RELEASE_BRANCH"
          # gh repo set-default k8s-operatorhub/community-operators
          gh repo set-default jsenko/community-operators
          # GitHub user ID must be used, the "-u" workaround did not work:
          gh pr create --title "$TITLE" --body "$BODY" --base main --head "jsenko:$RELEASE_BRANCH" 

#      - name: Checkout the Openshift Community Operators repository
#        run: |
#          mkdir openshift-community-operators
#          cd openshift-community-operators
#          git init
#          git config user.name "Jakub Senko"
#          git config user.email m@jsenko.net
#          git remote add origin https://github.com/redhat-openshift-ecosystem/community-operators-prod.git
#          git remote add source "https://jsenko:${{ secrets.JSENKO_ACCESS_TOKEN }}@github.com/jsenko/community-operators-prod.git"
#          git fetch
#          git checkout --track origin/main
#          git push -f source main
#
#      - name: Create the Openshift Community Operators PR
#        working-directory: openshift-community-operators
#        run: |
#          git checkout -b "$RELEASE_BRANCH"
#          TITLE="Release Apicurio Registry Operator $PACKAGE_VERSION"
#          BODY=$(curl -s https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/docs/pull_request_template.md)
#          mkdir operators/apicurio-registry-3 # TODO: Remove after the first release
#          echo -e "---\nupdateGraph: replaces-mode\nreviewers:\n  - apicurio-ci\n  - carlesarnal\n  - EricWittmann  - jsenko\n" > operators/apicurio-registry-3/ci.yaml # TODO: Remove after the first release
#          cp -r "../registry/operator/target/bundle/apicurio-registry-3/$PACKAGE_VERSION" operators/apicurio-registry-3
#          git add .
#          git commit -s -m "$TITLE"
#          git push -f source "$RELEASE_BRANCH"
#          # gh repo set-default redhat-openshift-ecosystem/community-operators-prod
#          gh repo set-default jsenko/community-operators-prod
#          # GitHub user ID must be used, the "-u" workaround did not work:
#          gh pr create --title "$TITLE" --body "$BODY" --base main --head "jsenko:$RELEASE_BRANCH"

      - name: Configure custom env. variables 2
        run: |
          # We want to use latest-snapshot instead of x.y.z-snapshot
          echo "export IMAGE_TAG=latest-snapshot" >> "$CUSTOM_ENV"

      - name: Prepare post-release changes
        working-directory: registry/operator
        run: |
          git checkout $BRANCH

      - name: Update catalog template
        working-directory: registry/operator
        run: |
          make release-catalog-template-update
          git add $(make VAR=CATALOG_DIR get-variable)

      - name: Update Makefile
        working-directory: registry/operator
        run: |
          make VAR=PREVIOUS_PACKAGE_VERSION "VAL=$PACKAGE_VERSION" set-variable
          make VAR=STUDIO_UI_IMAGE_TAG "VAL=latest-snapshot" set-variable
          git add Makefile

      - name: Update install file
        working-directory: registry/operator
        run: |
          source "$CUSTOM_ENV"
          make INSTALL_FILE=install/install.yaml dist-install-file
          git add install/*

      - name: Commit & push post-release changes
        working-directory: registry/operator
        run: |
          git commit -m "ci(operator): post-release changes for $RELEASE_VERSION"
          git push origin $BRANCH

      #      - name: Slack Notification (Always)
      #        if: always()
      #        run: |
      #          MESSAGE="'${{ github.workflow }}/${{ github.job }}' job completed with status: ${{ job.status }}"
      #          REPO="${{ github.repository }}"
      #          LINK="https://github.com/$REPO/actions/runs/${{ github.run_id }}"
      #          PAYLOAD="{\"workflow\": \"${{ github.workflow }}\", \"status\": \"${{ job.status }}\", \"message\": \"$MESSAGE\", \"link\": \"$LINK\", \"repository\": \"$REPO\"}"
      #          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${{ secrets.SLACK_NOTIFICATION_WEBHOOK }}
      #
      #      - name: Slack Notification (Error)
      #        if: failure()
      #        run: |
      #          MESSAGE="'${{ github.workflow }}/${{ github.job }}' job FAILED!"
      #          REPO="${{ github.repository }}"
      #          LINK="https://github.com/$REPO/actions/runs/${{ github.run_id }}"
      #          PAYLOAD="{\"workflow\": \"${{ github.workflow }}\", \"status\": \"${{ job.status }}\", \"message\": \"$MESSAGE\", \"link\": \"$LINK\", \"repository\": \"$REPO\"}"
      #          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${{ secrets.SLACK_ERROR_WEBHOOK }}

      - name: Setup tmate session on failure
        if: failure() # TODO: Debug switch
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
